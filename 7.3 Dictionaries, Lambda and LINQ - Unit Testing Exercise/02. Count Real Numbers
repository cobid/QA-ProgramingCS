using NUnit.Framework;

using System;

namespace TestApp.Tests;

public class CountRealNumbersTests
{
    // TODO: finish test
    [Test]
    public void Test_Count_WithEmptyArray_ShouldReturnEmptyString()
    {
        // Arrange
        int[] num = new int[0];
        string expected = string.Empty; 
        // Act
        string result = CountRealNumbers.Count(num);   
        // Assert
        Assert.That(result, Is.Empty);
    }

    [Test]
    public void Test_Count_WithSingleNumber_ShouldReturnCountString()
    {
        int[] num = new[] {5};
        string expected = "5 -> 1";
        // Act
        string result = CountRealNumbers.Count(num);
        // Assert
        Assert.That (result, Is.EqualTo(expected));
    }

    [Test]
    public void Test_Count_WithMultipleNumbers_ShouldReturnCountString()
    {
        int[] num = new[] { 3, 4, 7, 9, 3, 9 };
        string expected = "3 -> 2" 
            + $"{Environment.NewLine}" + 
            "4 -> 1" +
            $"{Environment.NewLine}" +
            "7 -> 1" +
            $"{Environment.NewLine}" +
            "9 -> 2";
        // Act
        string result = CountRealNumbers.Count(num);
        // Assert
        Assert.That(result, Is.EqualTo(expected));
    }

    [Test]
    public void Test_Count_WithNegativeNumbers_ShouldReturnCountString()
    {
        int[] num = new[] { -1, -4, -7, -9, -1, -9 };
        string expected = "-9 -> 2" +
            $"{Environment.NewLine}" + "-7 -> 1" +
            $"{Environment.NewLine}" + "-4 -> 1" +
            $"{Environment.NewLine}" + "-1 -> 2";
        // Act
        string result = CountRealNumbers.Count(num);
        // Assert
        Assert.That(result, Is.EqualTo(expected));
    }

    [Test]
    public void Test_Count_WithZero_ShouldReturnCountString()
    {
        int[] num = new[] { 0, 0, 0};
        string expected = "0 -> 3";
        // Act
        string result = CountRealNumbers.Count(num);
        // Assert
        Assert.That(result, Is.EqualTo(expected));
    }
}
